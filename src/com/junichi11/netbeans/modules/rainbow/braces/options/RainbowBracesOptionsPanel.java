/*
 * Copyright 2018 junichi11.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.junichi11.netbeans.modules.rainbow.braces.options;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import javax.swing.Icon;
import javax.swing.JCheckBox;
import javax.swing.SpinnerNumberModel;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.*;
import org.openide.awt.ColorComboBox;
import org.openide.util.NbBundle;

/**
 *
 * @author junichi11
 */
public class RainbowBracesOptionsPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = -7960457578041904562L;
    private static final String HEX_COLOR_FORMAT = "#%02x%02x%02x"; // NOI18N

    private final RainbowBracesOptionsPanelController controller;
    private String errorMessage;
    private List<JCheckBox> colorCheckBoxes = Collections.emptyList();
    private List<ColorComboBox> colorComboBoxes = Collections.emptyList();

    /**
     * Creates new form RainbowBracesColorsPanel
     */
    public RainbowBracesOptionsPanel(RainbowBracesOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        init();
    }

    private void init() {
        errorLabel.setForeground(UIManager.getColor("nb.errorForeground")); // NOI18N
        resetColorsBarLabel.setText(" "); // NOI18N
        setErrorMessage(null);
        // add listeners
        mimeTypesTextField.getDocument().addDocumentListener(new DefaultDocumentListener());
        List<String> defaultColorNames = DefaultColors.getDefaultColorNames();
        defaultColorNames.forEach(color -> resetColorsComboBox.addItem(color));
        resetColorsComboBox.addItemListener(e -> setColorBar());

        setColorBar();
        colorCheckBoxes = getColorCheckBoxes();
        colorComboBoxes = getColorComboBoxes();
    }

    private void setColorBar() {
        resetColorsBarLabel.setIcon(
                new ColorBarIcon(
                        DefaultColors.getDefaultColors((String) resetColorsComboBox.getSelectedItem()),
                        resetColorsBarLabel.getPreferredSize().height
                )
        );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mimeTypesLabel = new javax.swing.JLabel();
        mimeTypesTextField = new javax.swing.JTextField();
        colorComboBox1 = new org.openide.awt.ColorComboBox();
        colorComboBox2 = new org.openide.awt.ColorComboBox();
        colorComboBox3 = new org.openide.awt.ColorComboBox();
        colorComboBox4 = new org.openide.awt.ColorComboBox();
        colorComboBox5 = new org.openide.awt.ColorComboBox();
        colorComboBox6 = new org.openide.awt.ColorComboBox();
        colorComboBox7 = new org.openide.awt.ColorComboBox();
        colorComboBox8 = new org.openide.awt.ColorComboBox();
        colorComboBox9 = new org.openide.awt.ColorComboBox();
        colorCheckBox1 = new javax.swing.JCheckBox();
        colorCheckBox2 = new javax.swing.JCheckBox();
        colorCheckBox3 = new javax.swing.JCheckBox();
        colorCheckBox4 = new javax.swing.JCheckBox();
        colorCheckBox5 = new javax.swing.JCheckBox();
        colorCheckBox6 = new javax.swing.JCheckBox();
        colorCheckBox7 = new javax.swing.JCheckBox();
        colorCheckBox8 = new javax.swing.JCheckBox();
        colorCheckBox9 = new javax.swing.JCheckBox();
        enabledCheckBox = new javax.swing.JCheckBox();
        parenthesesCheckBox = new javax.swing.JCheckBox();
        bracketsCheckBox = new javax.swing.JCheckBox();
        bracesCheckBox = new javax.swing.JCheckBox();
        errorLabel = new javax.swing.JLabel();
        resetColorsButton = new javax.swing.JButton();
        resetColorsComboBox = new javax.swing.JComboBox<>();
        resetColorsLabel = new javax.swing.JLabel();
        resetColorsBarLabel = new javax.swing.JLabel();
        skipCommentsCheckBox = new javax.swing.JCheckBox();
        skipStringsCheckBox = new javax.swing.JCheckBox();
        maxNumberOfLinesLabel = new javax.swing.JLabel();
        maxNumberOfLinesSpinner = new javax.swing.JSpinner();

        org.openide.awt.Mnemonics.setLocalizedText(mimeTypesLabel, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.mimeTypesLabel.text")); // NOI18N

        mimeTypesTextField.setText(org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.mimeTypesTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(colorCheckBox1, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.colorCheckBox1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(colorCheckBox2, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.colorCheckBox2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(colorCheckBox3, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.colorCheckBox3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(colorCheckBox4, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.colorCheckBox4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(colorCheckBox5, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.colorCheckBox5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(colorCheckBox6, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.colorCheckBox6.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(colorCheckBox7, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.colorCheckBox7.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(colorCheckBox8, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.colorCheckBox8.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(colorCheckBox9, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.colorCheckBox9.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(enabledCheckBox, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.enabledCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(parenthesesCheckBox, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.parenthesesCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(bracketsCheckBox, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.bracketsCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(bracesCheckBox, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.bracesCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(errorLabel, "ERROR"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(resetColorsButton, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.resetColorsButton.text")); // NOI18N
        resetColorsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetColorsButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(resetColorsLabel, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.resetColorsLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(resetColorsBarLabel, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.resetColorsBarLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(skipCommentsCheckBox, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.skipCommentsCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(skipStringsCheckBox, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.skipStringsCheckBox.text")); // NOI18N

        maxNumberOfLinesLabel.setLabelFor(maxNumberOfLinesSpinner);
        org.openide.awt.Mnemonics.setLocalizedText(maxNumberOfLinesLabel, org.openide.util.NbBundle.getMessage(RainbowBracesOptionsPanel.class, "RainbowBracesOptionsPanel.maxNumberOfLinesLabel.text")); // NOI18N

        maxNumberOfLinesSpinner.setModel(new javax.swing.SpinnerNumberModel(3000, 0, null, 100));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mimeTypesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mimeTypesTextField))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(parenthesesCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bracketsCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bracesCheckBox))
                    .addComponent(enabledCheckBox)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(errorLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(colorCheckBox4)
                                    .addComponent(colorCheckBox1)
                                    .addComponent(colorCheckBox7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(colorComboBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(colorComboBox4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(colorComboBox7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(colorCheckBox5)
                                    .addComponent(colorCheckBox2)
                                    .addComponent(colorCheckBox8))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(colorComboBox2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(colorComboBox5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(colorComboBox8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(colorCheckBox6)
                            .addComponent(colorCheckBox3)
                            .addComponent(colorCheckBox9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(colorComboBox3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(colorComboBox6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(colorComboBox9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(skipCommentsCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(skipStringsCheckBox))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(maxNumberOfLinesLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(maxNumberOfLinesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(resetColorsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resetColorsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resetColorsBarLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetColorsButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(enabledCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mimeTypesLabel)
                    .addComponent(mimeTypesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parenthesesCheckBox)
                    .addComponent(bracketsCheckBox)
                    .addComponent(bracesCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(skipCommentsCheckBox)
                    .addComponent(skipStringsCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(colorCheckBox1)
                        .addComponent(colorComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(colorCheckBox2)
                        .addComponent(colorComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(colorCheckBox3)
                        .addComponent(colorComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colorCheckBox4)
                    .addComponent(colorComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colorCheckBox5)
                    .addComponent(colorComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colorCheckBox6)
                    .addComponent(colorComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colorCheckBox7)
                    .addComponent(colorComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colorCheckBox8)
                    .addComponent(colorComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colorCheckBox9)
                    .addComponent(colorComboBox9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetColorsButton)
                    .addComponent(resetColorsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetColorsLabel)
                    .addComponent(resetColorsBarLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxNumberOfLinesLabel)
                    .addComponent(maxNumberOfLinesSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(errorLabel))
        );
    }// </editor-fold>//GEN-END:initComponents

    @NbBundle.Messages({
        "# {0} - name",
        "RainbowBracesOptionsPanel.confirmation.message.reset.colors=Would you really like to rest colors with {0}? You cannot undo them.",
        "RainbowBracesOptionsPanel.confirmation.message.title=Reset colors"
    })
    private void resetColorsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetColorsButtonActionPerformed
        // show confirmation dialog
        String name = (String) resetColorsComboBox.getSelectedItem();
        NotifyDescriptor.Confirmation confirmation = new NotifyDescriptor.Confirmation(
                Bundle.RainbowBracesOptionsPanel_confirmation_message_reset_colors(name),
                Bundle.RainbowBracesOptionsPanel_confirmation_message_title(),
                NotifyDescriptor.OK_CANCEL_OPTION,
                NotifyDescriptor.QUESTION_MESSAGE
        );
        if (DialogDisplayer.getDefault().notify(confirmation) != NotifyDescriptor.OK_OPTION) {
            return;
        }
        RainbowBracesOptions options = RainbowBracesOptions.getInstance();
        for (int i = 0; i < colorComboBoxes.size(); i++) {
            ColorComboBox colorComboBox = colorComboBoxes.get(i);
            colorComboBox.setSelectedColor(Color.decode(options.getDefaultColorCode(name, i + 1)));
        }
    }//GEN-LAST:event_resetColorsButtonActionPerformed

    void load() {
        RainbowBracesOptions options = RainbowBracesOptions.getInstance();
        enabledCheckBox.setSelected(options.isEnabled());
        mimeTypesTextField.setText(options.getMimeTypeRegex());
        parenthesesCheckBox.setSelected(options.areParenthesesEnabled());
        bracketsCheckBox.setSelected(options.areBracketsEnabled());
        bracesCheckBox.setSelected(options.areBracesEnabled());

        // skip
        skipCommentsCheckBox.setSelected(options.isCommentSkipped());
        skipStringsCheckBox.setSelected(options.isStringSkipped());

        // colors
        for (int i = 0; i < colorCheckBoxes.size(); i++) {
            JCheckBox colorCheckBox = colorCheckBoxes.get(i);
            colorCheckBox.setSelected(options.isColorEnabled(i + 1));
        }

        for (int i = 0; i < colorComboBoxes.size(); i++) {
            ColorComboBox colorComboBox = colorComboBoxes.get(i);
            colorComboBox.setSelectedColor(Color.decode(options.getColorCode(i + 1)));
        }

        // max number of lines
        maxNumberOfLinesSpinner.setValue(options.getMaxLines());
    }

    void store() {
        RainbowBracesOptions options = RainbowBracesOptions.getInstance();
        options.setEnabled(enabledCheckBox.isSelected());
        options.setMimeTypeRegex(mimeTypesTextField.getText());
        options.setParenthesesEnabled(parenthesesCheckBox.isSelected());
        options.setBracketsEnabled(bracketsCheckBox.isSelected());
        options.setBracesEnabled(bracesCheckBox.isSelected());

        // skip
        options.setCommentSkipped(skipCommentsCheckBox.isSelected());
        options.setStringSkipped(skipStringsCheckBox.isSelected());

        for (int i = 0; i < colorCheckBoxes.size(); i++) {
            options.setEnabledColor(i + 1, colorCheckBoxes.get(i).isSelected());
        }

        for (int i = 0; i < colorComboBoxes.size(); i++) {
            ColorComboBox colorComboBox = colorComboBoxes.get(i);
            Color selectedColor = colorComboBox.getSelectedColor();
            options.setColorCode(i + 1, String.format(HEX_COLOR_FORMAT, selectedColor.getRed(), selectedColor.getGreen(), selectedColor.getBlue()));
        }

        // max number of lines
        options.setMaxLines(((SpinnerNumberModel) maxNumberOfLinesSpinner.getModel()).getNumber().intValue());
    }

    private List<JCheckBox> getColorCheckBoxes() {
        // MUST NOT change the order
        return Arrays.asList(
                colorCheckBox1,
                colorCheckBox2,
                colorCheckBox3,
                colorCheckBox4,
                colorCheckBox5,
                colorCheckBox6,
                colorCheckBox7,
                colorCheckBox8,
                colorCheckBox9
        );
    }

    private List<ColorComboBox> getColorComboBoxes() {
        // MUST NOT change the order
        return Arrays.asList(
                colorComboBox1,
                colorComboBox2,
                colorComboBox3,
                colorComboBox4,
                colorComboBox5,
                colorComboBox6,
                colorComboBox7,
                colorComboBox8,
                colorComboBox9
        );
    }

    boolean valid() {
        return errorMessage == null;
    }

    private void fireChange() {
        String regex = mimeTypesTextField.getText();
        try {
            Pattern.compile(regex);
            setErrorMessage(null);
        } catch (PatternSyntaxException ex) {
            setErrorMessage(ex.getMessage());
        }
        controller.changed();
    }

    private void setErrorMessage(String message) {
        if (message == null || message.isEmpty()) {
            errorMessage = null;
            errorLabel.setText("");
            return;
        }
        errorMessage = message;
        errorLabel.setText(message);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox bracesCheckBox;
    private javax.swing.JCheckBox bracketsCheckBox;
    private javax.swing.JCheckBox colorCheckBox1;
    private javax.swing.JCheckBox colorCheckBox2;
    private javax.swing.JCheckBox colorCheckBox3;
    private javax.swing.JCheckBox colorCheckBox4;
    private javax.swing.JCheckBox colorCheckBox5;
    private javax.swing.JCheckBox colorCheckBox6;
    private javax.swing.JCheckBox colorCheckBox7;
    private javax.swing.JCheckBox colorCheckBox8;
    private javax.swing.JCheckBox colorCheckBox9;
    private org.openide.awt.ColorComboBox colorComboBox1;
    private org.openide.awt.ColorComboBox colorComboBox2;
    private org.openide.awt.ColorComboBox colorComboBox3;
    private org.openide.awt.ColorComboBox colorComboBox4;
    private org.openide.awt.ColorComboBox colorComboBox5;
    private org.openide.awt.ColorComboBox colorComboBox6;
    private org.openide.awt.ColorComboBox colorComboBox7;
    private org.openide.awt.ColorComboBox colorComboBox8;
    private org.openide.awt.ColorComboBox colorComboBox9;
    private javax.swing.JCheckBox enabledCheckBox;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel maxNumberOfLinesLabel;
    private javax.swing.JSpinner maxNumberOfLinesSpinner;
    private javax.swing.JLabel mimeTypesLabel;
    private javax.swing.JTextField mimeTypesTextField;
    private javax.swing.JCheckBox parenthesesCheckBox;
    private javax.swing.JLabel resetColorsBarLabel;
    private javax.swing.JButton resetColorsButton;
    private javax.swing.JComboBox<String> resetColorsComboBox;
    private javax.swing.JLabel resetColorsLabel;
    private javax.swing.JCheckBox skipCommentsCheckBox;
    private javax.swing.JCheckBox skipStringsCheckBox;
    // End of variables declaration//GEN-END:variables

    //~ Inner classes
    private class DefaultDocumentListener implements DocumentListener {

        public DefaultDocumentListener() {
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            processUpdate();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            processUpdate();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            processUpdate();
        }

        private void processUpdate() {
            fireChange();
        }

    }

    private static class ColorBarIcon implements Icon {

        private final List<String> colors;
        private final int width;
        private final int height;

        public ColorBarIcon(List<String> colors, int size) {
            this.colors = colors;
            this.height = size;
            this.width = size * colors.size();
        }

        @Override
        public void paintIcon(Component c, Graphics g, int x, int y) {
            Graphics2D g2d = (Graphics2D) g.create();
            int i = 0;
            for (String color : colors) {
                g2d.setColor(Color.decode(color));
                g2d.fillRect(x + i, y, height, height);
                i += height;
            }
            g2d.dispose();
        }

        @Override
        public int getIconWidth() {
            return width;
        }

        @Override
        public int getIconHeight() {
            return height;
        }
    }
}
